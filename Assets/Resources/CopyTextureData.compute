#pragma kernel CopyTextureData

Texture2D<float4> Texture;
RWStructuredBuffer<uint> TextureData;

uint TextureWidth;
uint TextureHeight;
int TextureDataOffset;
int TextureDescriptorOffset;
int TextureHasAlpha;

[numthreads(8, 8, 1)]
void CopyTextureData(uint3 id : SV_DispatchThreadID)
{
    uint pixelX = id.x;
    uint pixelY = id.y;
    uint pixelIndex = pixelY * TextureWidth + pixelX;

    if (pixelX < TextureWidth && pixelY < TextureHeight)
    {
        TextureData[TextureDescriptorOffset + 0] = TextureWidth;
        TextureData[TextureDescriptorOffset + 1] = TextureHeight;
        TextureData[TextureDescriptorOffset + 2] = TextureDataOffset;
        TextureData[TextureDescriptorOffset + 3] = 0;

        float4 texel = Texture.Load(int3(pixelX, pixelY, 0));
        uint writeIndex = pixelIndex + TextureDataOffset;

        uint r = (uint)(texel.r * 255.0f) & 0xff;
        uint g = (uint)(texel.g * 255.0f) & 0xff;
        uint b = (uint)(texel.b * 255.0f) & 0xff;
        uint a = TextureHasAlpha ? (uint)(texel.a * 255.0f) & 0xff : 0xff;
        uint texelData = (a << 24) | (b << 16) | (g << 8) | r;

        TextureData[writeIndex] = texelData;
    }
}

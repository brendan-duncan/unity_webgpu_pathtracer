#pragma kernel CopyTextureData

Texture2D<float4> Texture;
RWStructuredBuffer<uint> TextureData;

uint TextureWidth;
uint TextureHeight;
int Offset;

[numthreads(128, 1, 1)]
void CopyTextureData(uint3 id : SV_DispatchThreadID)
{
    const uint pixelIndex = id.x;
    const uint pixelX = pixelIndex % TextureWidth;
    const uint pixelY = pixelIndex / TextureWidth;
    if (pixelX >= TextureWidth || pixelY >= TextureHeight)
    {
        return;
    }

    float4 texel = Texture.Load(int3(pixelX, pixelY, 0));
    uint writeIndex = pixelIndex + Offset;

    uint r = (uint)(texel.r * 255.0f) & 0xff;
    uint g = (uint)(texel.g * 255.0f) & 0xff;
    uint b = (uint)(texel.b * 255.0f) & 0xff;
    uint a = (uint)(texel.a * 255.0f) & 0xff;
    uint texelData = (a << 24) | (b << 16) | (g << 8) | r;

    TextureData[writeIndex] = asuint(texelData);
}

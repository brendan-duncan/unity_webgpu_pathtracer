#pragma kernel Generate

//#include "util/camera.hlsl"
//#include "util/common.hlsl"
//#include "util/random.hlsl"

RWStructuredBuffer<Ray> RaysIn;

[numthreads(8, 8, 1)]
void Generate(uint3 gid : SV_DispatchThreadID)
{
    const uint pixelX = gid.x;
    const uint pixelY = gid.y;
    const uint pixelIndex = pixelY * OutputWidth + pixelX;
    const uint startSampleIndex = pixelY * (OutputWidth * numSamples) + (pixelX * numSamples);

    float2 pixelCoords = float2(pixelX, pixelY);

    const int numSamples = max(1, SamplesPerPass);
    const float fSamples = (float)numSamples;
    uint rngState = pixelIndex * (CurrentSample + 1) + RngSeedRoot;

    float3 color = 0.0f;
    int sampleIndex = 0;
    for (; sampleIndex < numSamples; ++sampleIndex)
    {
        float2 randomSample = float2(RandomFloat(rngState), RandomFloat(rngState));
        float2 pixelCoordsSample = pixelCoords + randomSample;

        Ray ray = GetScreenRay(pixelCoordsSample, rngState);

        RaysOut[startSampleIndex + sampleIndex] = ray;
    }
}

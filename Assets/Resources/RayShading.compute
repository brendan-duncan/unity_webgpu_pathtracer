#pragma multi_compile __ OUTPUT_NDOTL OUTPUT_BVH_STEPS OUTPUT_BARYCENTRICS OUTPUT_NORMALS OUTPUT_UVS
#pragma kernel RayShading

#include "Common.cginc"

// For NDotL Output
float4 LightDirection;
float4 LightColor;

float2 InterpolateAttribute(float2 barycentric, float2 attr0, float2 attr1, float2 attr2)
{
    return attr0 * (1.0f - barycentric.x - barycentric.y) + attr1 * barycentric.x + attr2 * barycentric.y;
}

float3 InterpolateAttribute(float2 barycentric, float3 attr0, float3 attr1, float3 attr2)
{
    return attr0 * (1.0f - barycentric.x - barycentric.y) + attr1 * barycentric.x + attr2 * barycentric.y;
}

[numthreads(64, 1, 1)]
void RayShading(uint3 id : SV_DispatchThreadID) 
{
    if (id.x >= TotalRays)
    {
        return;
    }
    
    const uint rayIndex = id.x;
    const uint2 pixelCoords = uint2(rayIndex % OutputWidth, rayIndex / OutputWidth);
    
    RayHit hit = RayHitBuffer[rayIndex];
    
    // No geometry intersections, hit far plane
    if (hit.t >= FarPlane)
    {
        Output[pixelCoords] = float4(0.0f, 0.0f, 0.0f, 0.0f);
        return;
    }
    
    #if OUTPUT_NDOTL
        TriangleAttributes triAttr = TriangleAttributesBuffer[hit.triIndex];
        float3 normal = InterpolateAttribute(hit.barycentric, triAttr.normal0, triAttr.normal1, triAttr.normal2);
        float ndotl = max(dot(normalize(normal), LightDirection.xyz), 0.0);
        Output[pixelCoords] = float4(ndotl * LightColor.rgb, 1.0f);
    #elif OUTPUT_BVH_STEPS
        Output[pixelCoords] = float4(hit.steps / 43.0f, hit.steps > 80, 0.0f, 1.0f);
    #elif OUTPUT_BARYCENTRICS
        Output[pixelCoords] = float4(hit.barycentric, 0.0f, 1.0f);
    #elif OUTPUT_NORMALS
        TriangleAttributes triAttr = TriangleAttributesBuffer[hit.triIndex];
        float3 normal = InterpolateAttribute(hit.barycentric, triAttr.normal0, triAttr.normal1, triAttr.normal2);
        Output[pixelCoords] = float4(normalize(normal).xyz, 1.0f);
    #elif OUTPUT_UVS
        TriangleAttributes triAttr = TriangleAttributesBuffer[hit.triIndex];
        float2 uv = InterpolateAttribute(hit.barycentric, triAttr.uv0, triAttr.uv1, triAttr.uv2);
        Output[pixelCoords] = float4(uv.xy, 0.0f, 1.0f);
    #else
        // Ray Distance
        float normDist = hit.t / 100.0f;
        Output[pixelCoords] = float4(normDist, normDist, normDist, 1.0f);
    #endif
}